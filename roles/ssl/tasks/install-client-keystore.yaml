# 安装前的检查
- import_tasks: install-check.yaml

- name: Create directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ ssl_local_path }}"
  delegate_to: localhost
  run_once: true

- name: Check that the keystore file exists
  stat:
    path: "{{ ssl_local_path }}/{{ ssl_client_ks }}"
  register: stat_result
  delegate_to: localhost
  run_once: true

# Create client keystore
- name: Create client keystore file
  shell: '$JAVA_HOME/bin/keytool -genkeypair \
          -keystore {{ ssl_local_path }}/{{ ssl_client_ks }} \
          -alias localhost \
          -validity {{ ssl_client_ks_day }} \
          -keyalg RSA \
          -storepass {{ ssl_client_ks_password }} \
          -keypass {{ ssl_client_key_password }} \
          -dname {{ ssl_client_ks_dname }}'
  environment:
    JAVA_HOME: "{{ java_home }}"
  async: 20
  poll: 2
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists
  delegate_to: localhost
  run_once: true

# Export certificate signing request from client keystore
- name: Export certificate signing request from client keystore
  shell: '$JAVA_HOME/bin/keytool -certreq \
          -keystore {{ ssl_local_path }}/{{ ssl_client_ks }} \
          -alias localhost \
          -file {{ ssl_local_path }}/{{ ssl_client_csr }} \
          -storepass {{ ssl_client_ks_password }} \
          -keypass {{ ssl_client_key_password }} \
          -noprompt'
  environment:
    JAVA_HOME: "{{ java_home }}"
  async: 20
  poll: 2
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists
  delegate_to: localhost
  run_once: true

# Signing client certificate(生成ssl_client_cert)
- name: Signing client certificate
  shell: '. .bash_profile; \
          openssl x509 -req \
          -CA {{ ssl_local_path }}/{{ ssl_ca_cert }} \
          -CAkey {{ ssl_local_path }}/{{ ssl_ca_key }} \
          -in {{ ssl_local_path }}/{{ ssl_client_csr }} \
          -out {{ ssl_local_path }}/{{ ssl_client_cert }} \
          -days {{ ssl_client_cert_day }} \
          -CAcreateserial \
          -extensions v3_ca \
          -passin pass:{{ ssl_ca_key_password }}'
  async: 20
  poll: 2
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists
  delegate_to: localhost
  run_once: true

# Import ca certificate file into client keystore file
- name: Import ca certificate file into client keystore file
  shell: '$JAVA_HOME/bin/keytool -import \
          -keystore {{ ssl_local_path }}/{{ ssl_client_ks }} \
          -alias CARoot \
          -file {{ ssl_local_path }}/{{ ssl_ca_cert }} \
          -storepass {{ ssl_client_ks_password }} \
          -noprompt'
  environment:
    JAVA_HOME: "{{ java_home }}"
  async: 20
  poll: 2
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists
  delegate_to: localhost
  run_once: true

# Import signing client certificate file into client keystore file
- name: Import signing client certificate file into client keystore file
  shell: '$JAVA_HOME/bin/keytool -import \
          -keystore {{ ssl_local_path }}/{{ ssl_client_ks }} \
          -alias localhost \
          -file {{ ssl_local_path }}/{{ ssl_client_cert }} \
          -storepass {{ ssl_client_ks_password }} \
          -noprompt'
  environment:
    JAVA_HOME: "{{ java_home }}"
  async: 20
  poll: 2
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists
  delegate_to: localhost
  run_once: true

- name: Copy client keystore to application server
  copy:
    src: "{{ item }}"
    dest: "{{ ssl_path }}"
    mode: "0644"
    force: yes
  with_items:
  - "{{ ssl_local_path }}/{{ ssl_client_ks }}"
