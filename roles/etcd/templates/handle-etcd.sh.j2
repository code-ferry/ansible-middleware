#!/bin/bash

status() {
    {{ etcd_home }}/etcdctl endpoint status --write-out=table
}

list() {
    {{ etcd_home }}/etcdctl member list --write-out=table
}

start() {
    ts=` date "+%Y-%m-%d_%H:%M:%S"`
    echo -e "\n----------- start ----------- ${ts}"

    pid=`ps -ef | grep "name={{ etcd_name }}" | grep -v "grep" | awk '{print $2}'`

    if [ X"" = X"$pid" ]; then
        echo "start etcd member, name={{ etcd_name }}"
    else
        echo "etcd member is running now, pid=${pid}, name={{ etcd_name }}"
        return 0
    fi

    echo "etcd starting!"
    {{ etcd_home }}/etcd --name={{ etcd_name }} --config-file={{ etcd_conf_dir }}/etcd.yaml
    if [ $? -ne 0 ]; then
        return 1
    fi
    return 0
}

stop() {
    ts=` date "+%Y-%m-%d_%H:%M:%S"`
    echo -e "\n----------- stop ----------- ${ts}"

    pid=`ps -ef | grep "name={{ etcd_name }}" | grep -v "grep" | awk '{print $2}'`
    echo "pid="${pid}
    if [ X"" = X"$pid" ]; then
        echo "etcd member not run, name={{ etcd_name }}"
        return 1
    fi

    kill -9 $pid
    if [ $? -ne 0 ]; then
        echo "kill etcd member fail, pid=$pid, name={{ etcd_name }}"
        return
    fi

    return 0
}

compact() {
    ts=` date "+%Y-%m-%d_%H:%M:%S"`
    echo -e "\n----------- compact ----------- ${ts}"

    etcdctl alarm list
    count=1
    while [ $count -lt 10 ]
    do
       echo -e "\ncompact db count: $count"
       count=`expr $count + 1`

       # 先分析能不能获取状态结果(成功:0; 失败:1)，就没有必要进行压缩等动作。示例：如果通信失败时可能得不到状态。
       statusInfo=$(etcdctl endpoint status 2>&1)
       statusResult=$?
       echo "Execute 'etcdctl endpoint status' result: ${statusResult}"
       echo "Execute 'etcdctl endpoint info' result: '${statusInfo}'"

       if [ $statusResult -eq 0 ]; then
           rev=$({{ etcd_home }}/etcdctl endpoint status --write-out="json" | egrep -o '"revision":[0-9]*' | egrep -o '[0-9].*')

           if [ X"$rev" == X"" ]; then
             echo "Can't get etcd revision."
             break
           fi

           echo "etcd compact, rev=${rev}"
           compactInfo=$(etcdctl compact ${rev} 2>&1)
           compactResult=$?
           # 打印压缩的情况
           echo "Execute 'etcdctl compact rev' result: ${compactResult}"
           echo "Execute 'etcdctl compact rev' info: '${compactInfo}'"

           # 经常会出现，已经压缩过了（该修订版已经压缩）的报错，这对运行效果没有影响。也可以退出了。
           compactInfoContainError=$(echo ${compactInfo} | grep 'required revision has been compacted' | grep -v grep)
           if [ -n "$compactInfoContainError" ]; then
             return 1
           fi

           # 压缩执行结果没有问题就直接退出了。
           if [ $compactResult -eq 0 ]; then
             return 0
           fi
       fi

       sleep 3
    done

    return 1
}

defrag() {
    ts=` date "+%Y-%m-%d_%H:%M:%S"`
    echo -e "\n----------- defrag ----------- ${ts}"

    count=1
    while [ $count -lt 10 ]
    do
       echo -e "\ndefrag db count: ${count}"
       count=`expr $count + 1`

       etcdctl defrag
       defragResult=$?
       # 打印碎片整理的情况
       echo "Execute 'etcdctl defrag' result: ${defragResult}"

       if [ $defragResult -eq 0 ]; then
           etcdctl alarm disarm
           return 0
       fi
    done

    return 1
}

snapshot() {
    ts=` date "+%Y-%m-%d_%H:%M:%S"`
    {{ etcd_home }}/etcdctl snapshot save {{ etcd_home }}/${ts}.db
}

restore() {
    db=$1
    if [ ! -f $db ]; then
        echo "snapshot db file not exist"
        return 1
    fi

    {{ etcd_home }}/etcdctl snapshot restore ${db} --config-file={{ etcd_conf_dir }}/etcd.yaml
    if [ $? -ne 0 ]; then
        echo "snapshot restore ${db} fail"
        return 1
    fi
	return 0
}

########################################
################执行命令################
########################################
result=0
if [ "$1" == "start" ]; then
    start
    result=$?
elif [ "$1" == "stop" ]; then
    stop
    result=$?
elif [ "$1" == "status" ]; then
    status
elif [ "$1" == "list" ]; then
    list
elif [ "$1" == "snapshot" ]; then
    snapshot
    result=$?
elif [ "$1" == "restore" ]; then
    restore $2
    result=$?
elif [ "$1" == "restart" ]; then
    stop
    result=$?
    if [ $result -ne 0 ]; then
        exit 1
    fi
    start
    result=$?
elif [ "$1" == "compact" ]; then
    compact
    result=$?
elif [ "$1" == "defrag" ]; then
    defrag
    result=$?
elif [ X"$1" == X"" ]; then
    echo "etcd command is empty!"
    result=1
else
    result=1
fi

if [ $result -ne 0 ]; then
    echo "$1 fail"
else
    echo "$1 success"
fi

exit $result
